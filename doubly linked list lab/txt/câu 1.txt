A double-ended queue or deque (pronounced "deck") is like a queue or a stack but supports adding and removing items at both ends.
A deque stores a collection of items and supports the following methods:
+ getSize(): int                   => number of items in the deque
+ pushFront(int item): void      => add an item to the left end   
+ pushBack(int item): void     => add an item to the right end
+ popFront(): int                => remove and return an item from the left end
+ popBack(): int               => remove and return an item from the right end
+ clear(): void                 => erase all items in the deque

// For checking purposes
+ printQueue(): void            => print all items in the deque from left to right, separated by a space, with a new line (i.e '\n') at the end.
+ printQueueReverse(): void     => print all items in the deque from right to left, separated by a space, with a new line at the end.
Note: if the deque is empty, every pop method return -1;

class Deque {
private:
    class Node {
    private:
        int value;
        Node* left;
        Node* right;
        friend class Deque;
    public:
        Node(int val = 0, Node* l = nullptr, Node* r = nullptr) : value(val), left(l), right(r) { }
    };

private:
    Node* head;
    Node* tail;
    int curSize;

public:
    Deque();
    ~Deque();
    int getSize();
    void pushFront(int item);
    void pushBack(int item);
    int popFront();
    int popBack();
    void clear();
    void printQueueReverse();
    void printQueue();
};