template<class T>
T SLinkedList<T>::get(int index) {
    /* Give the data of the element at given index in the list. */
    if (index>=count||index<0) throw out_of_range("");
    Node * temp = head;
    while (index>=1)
    {
        temp = temp->next;
        index--;
    }
    return temp->data;
}

template <class T>
void SLinkedList<T>::set(int index, const T& e) {
    /* Assign new value for element at given index in the list */
    if (index>=count||index<0) throw out_of_range("");
    Node * temp = head;
    while (index>=1)
    {
        temp = temp->next;
        index--;
    }
    temp->data = e;
}

template<class T>
bool SLinkedList<T>::empty() {
    /* Check if the list is empty or not. */
    if (count>0) return 0;
    else return 1;
    
}

template<class T>
int SLinkedList<T>::indexOf(const T& item) {
    /* Return the first index wheter item appears in list, otherwise return -1 */
    Node * temp = head;
    int index = 0;
    while (temp!=nullptr)
    {
        if (temp->data==item) return index;
        else{
        temp = temp->next;
        index++;
        }
    }
    return -1;
}

template<class T>
bool SLinkedList<T>::contains(const T& item) {
    /* Check if item appears in the list */
    Node * temp = head;
    while (temp!=nullptr)
    {
        if (temp->data==item) return 1;
        else{
        temp = temp->next;
        }
    }
    return 0;
}